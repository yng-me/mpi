[{"path":"https://yng-me.github.io/mpindex/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 mpindex authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"installation","dir":"Articles","previous_headings":"","what":"1. Installation","title":"Introduction to mpindex","text":"install mpindex package CRAN: want get latest development version mpindex, install GitHub. Note may need install devtools. Load package successfully completed installation.","code":"install.packages('mpindex') devtools::install_github('yng-me/mpindex') library(mpindex)"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"mpi-specifications","dir":"Articles","previous_headings":"","what":"2. MPI specifications","title":"Introduction to mpindex","text":"initial step prepare MPI specification file serve references computation well generation output later part process. file contain information MPI dimensions, indicators corresponding weights. file also easy create using common accessible file types .xlsx (Excel), .json, .csv, .txt (TSV).","code":""},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"built-in-specification-files","dir":"Articles","previous_headings":"2. MPI specifications","what":"Built-in specification files","title":"Introduction to mpindex","text":"convenience, mpindex included built-specification files (different formats). file contains dimensions, indicators, weight, relevant information Global MPI. see list files available: use built-specification file, say .csv file, use script first get full path file.","code":"system.file(\"extdata\", package = \"mpindex\") |> list.files() #> [1] \"global-mpi-specs.csv\"  \"global-mpi-specs.json\" \"global-mpi-specs.txt\"  #> [4] \"global-mpi-specs.xlsx\" specs_file <- system.file(\"extdata\", \"global-mpi-specs.csv\", package = \"mpindex\")"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"user-defined-specification-file","dir":"Articles","previous_headings":"2. MPI specifications","what":"User-defined specification file","title":"Introduction to mpindex","text":"can also define create specification file prefer happen use different sets dimensions indicators. minimum, however, file contain following columns/variables: Dimension, Indicator, Variable, Weight, Description (optional). Note order put columns matter also names case sensitive, make sure spell column names correctly. may download template want start scratch: MPI specification file sample.","code":""},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"using-define_mpi_specs","dir":"Articles","previous_headings":"2. MPI specifications","what":"Using define_mpi_specs","title":"Introduction to mpindex","text":"prepared specification file, load using define_mpi_specs function (type ?define_mpi_specs help text). demonstration purposes, use built-specification file, discussed . define_mpi_specs requires specification file first argument. default poverty cutoff set 1/3 (based Global MPI), unit analysis set households. can also define list poverty cutoffs specifying .poverty_cutoffs argument achieve gradient MPIs. dataset contains unique ID, like uuid, recommended define using .uid argument. can also set aggregation level. Make sure corresponds column name present dataset (see ?df_househod ). .unit_of_analysis, .source_of_data, .names_separator merely used auto labels generating output later.","code":"specs_file <- system.file(\"extdata\", \"global-mpi-specs.csv\", package = \"mpindex\") mpi_specs <- define_mpi_specs(specs_file) mpi_specs <- define_mpi_specs(   .mpi_specs_file = specs_file,    .poverty_cutoffs = c(1/3, 0.2, 0.8) ) mpi_specs <- define_mpi_specs(   .mpi_specs_file = specs_file,    .uid = 'uuid' ) mpi_specs <- define_mpi_specs(   .mpi_specs_file = specs_file,    .poverty_cutoffs = c(1/3, 0.2, 0.8),   .uid = 'uuid',   .aggregation = 'class' )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"make-the-specs-available-globally","dir":"Articles","previous_headings":"2. MPI specifications","what":"Make the specs available globally","title":"Introduction to mpindex","text":"also recommended make MPI specification available globally, rather providing argument manually everytime use functions within mpindex (later). Note: name passed options must exactly mpi_specs.","code":"options(mpi_specs = mpi_specs)"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"3. Data preparation","title":"Introduction to mpindex","text":"user mpindex assumed basic familiarity concept tidy data well able perform data wrangling transformation using tidyverse ecosystem. hood, mpindex uses dplyr verbs perform data manipulation. also assume dataset already tidy ready analysis. See R Data Science Hadley Wickham Garrett Grolemund need refresher.","code":""},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"dataset","dir":"Articles","previous_headings":"3. Data preparation","what":"Dataset","title":"Introduction to mpindex","text":"demonstration, use two (2) synthetic datasets available within package: df_household household-level data (type ?df_household info) df_household_roster individual-level data (type ?df_household_roster info)","code":"library(dplyr)  glimpse(df_household) #> Rows: 198 #> Columns: 21 #> $ uuid               <chr> \"5dbec60a-ebda-47bd-ae18-3b017a221125\", \"8b70c208-8… #> $ class              <chr> \"Rural\", \"Rural\", \"Rural\", \"Rural\", \"Rural\", \"Rural… #> $ drinking_water     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ toilet             <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, … #> $ with_child_died    <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, … #> $ roof               <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ walls              <int> 1, 1, 3, 3, 3, 5, 5, 1, 3, 1, 1, 4, 8, 2, 2, 10, 2,… #> $ floor              <int> 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 5, 2, 4, 1, 2, … #> $ electricity        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, … #> $ cooking_fuel       <int> 3, 5, 5, 5, 5, 5, 5, 3, 3, 1, 3, 5, 5, 5, 5, 5, 5, … #> $ asset_refrigerator <int> 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, … #> $ asset_radio        <int> 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, … #> $ asset_tv           <int> 1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, … #> $ asset_telephone    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ asset_mobile_phone <int> 4, 3, 2, 2, 5, 2, 1, 6, 2, 4, 1, 2, 3, 0, 0, 2, 0, … #> $ asset_animal_cart  <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ asset_computer     <int> 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ asset_motorcycle   <int> 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, … #> $ asset_bicycle      <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, … #> $ asset_car          <int> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ asset_truck        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … glimpse(df_household_roster) #> Rows: 905 #> Columns: 8 #> $ uuid                     <chr> \"5dbec60a-ebda-47bd-ae18-3b017a221125\", \"5dbe… #> $ line_number              <int> 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, … #> $ class                    <chr> \"Rural\", \"Rural\", \"Rural\", \"Rural\", \"Rural\", … #> $ sex                      <chr> \"Male\", \"Female\", \"Female\", \"Male\", \"Female\",… #> $ age                      <int> 55, 48, 17, 10, 30, 26, 3, 19, 66, 62, 34, 34… #> $ attending_school         <int> NA, NA, 1, 1, NA, NA, NA, 1, NA, NA, NA, NA, … #> $ undernourished           <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ completed_6yrs_schooling <int> 1, 1, 1, 2, 1, 1, NA, 2, 1, 1, 2, 1, 2, NA, 2…"},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"using-define_deprivation","dir":"Articles","previous_headings":"4. Creating deprivation profile","what":"Using define_deprivation","title":"Introduction to mpindex","text":"First, need create empty list, name deprivation_profile (feel free name whatever like). create deprivation profile indicator, use define_deprivation function (see ?define_deprivation) add deprivation_profile list created . Make sure deprivation profile indicator matches variable name declared specification file.","code":"deprivation_profile <- list()"},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"nutrition","dir":"Articles","previous_headings":"4. Creating deprivation profile > 1. Heath dimension","what":"1.1. Nutrition","title":"Introduction to mpindex","text":"indicator, use df_household_roster dataset. default, define_deprivation sets .collapse = FALSE. Since need collapse household level, need set .collapse = TRUE.","code":"deprivation_profile$nutrition <- df_household_roster |>    define_deprivation(     .indicator = nutrition,     .cutoff = undernourished == 1 & age < 70,     .collapse = TRUE   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"child-mortality","dir":"Articles","previous_headings":"4. Creating deprivation profile > 1. Heath dimension","what":"1.2. Child mortality","title":"Introduction to mpindex","text":"child mortality, use df_household dataset. unlike nutrition, need provide .collapse argument since applicable .","code":"deprivation_profile$child_mortality <- df_household |>    define_deprivation(     .indicator = child_mortality,     .cutoff = with_child_died == 1   )"},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"years-of-schooling","dir":"Articles","previous_headings":"4. Creating deprivation profile > 2. Education dimension","what":"2.1. Years of schooling","title":"Introduction to mpindex","text":"","code":"deprivation_profile$year_schooling <- df_household_roster |>    define_deprivation(     .indicator = year_schooling,     .cutoff = completed_6yrs_schooling == 2,     .collapse = TRUE   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"school-attendance","dir":"Articles","previous_headings":"4. Creating deprivation profile > 2. Education dimension","what":"2.2. School attendance","title":"Introduction to mpindex","text":"","code":"deprivation_profile$school_attendance <- df_household_roster |>    define_deprivation(     .indicator = school_attendance,     .cutoff = attending_school == 2 & age %in% c(5:24),     .collapse = TRUE   )"},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"cooking-fuel","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.1. Cooking fuel","title":"Introduction to mpindex","text":"","code":"deprivation_profile$cooking_fuel <- df_household |>    define_deprivation(     .indicator = cooking_fuel,     .cutoff = cooking_fuel %in% c(4:6, 9)   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"sanitation","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.2. Sanitation","title":"Introduction to mpindex","text":"","code":"deprivation_profile$sanitation <- df_household |>    define_deprivation(     .indicator = sanitation,     .cutoff = toilet > 1   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"drinking-water","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.3. Drinking water","title":"Introduction to mpindex","text":"","code":"deprivation_profile$drinking_water <- df_household |>    define_deprivation(     .indicator = drinking_water,     .cutoff = drinking_water == 2   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"electricity","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.4. Electricity","title":"Introduction to mpindex","text":"","code":"deprivation_profile$electricity <- df_household |>    define_deprivation(     .indicator = electricity,     .cutoff = electricity == 2   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"housing","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.5. Housing","title":"Introduction to mpindex","text":"","code":"deprivation_profile$housing <- df_household |>    define_deprivation(     .indicator = housing,     .cutoff = roof %in% c(5, 7, 9) | walls %in% c(5, 8, 9, 99) == 2 | floor %in% c(5, 6, 9)   )"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"assets","dir":"Articles","previous_headings":"4. Creating deprivation profile > 3. Living standards dimension","what":"3.6. Assets","title":"Introduction to mpindex","text":"indicator, need additional transformation.","code":"deprivation_profile$assets <- df_household |>    mutate_at(vars(starts_with('asset_')), ~ if_else(. > 0, 1L, 0L)) |>    mutate(     asset_phone = if_else(       (asset_telephone + asset_mobile_phone) > 0,        1L,        0L     )   ) |>    mutate(     with_hh_conveniences = (       asset_tv + asset_phone + asset_computer +          asset_animal_cart + asset_bicycle +          asset_motorcycle + asset_refrigerator) > 1,     with_mobility_assets = (asset_car + asset_truck) > 0   ) |>    define_deprivation(     .indicator = assets,     .cutoff = !(with_hh_conveniences & with_mobility_assets)   )"},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"using-compute_mpi","dir":"Articles","previous_headings":"5. Computing the MPI","what":"Using compute_mpi","title":"Introduction to mpindex","text":"completing deprivation profile, use compute_mpi function pass deprivation_profile list created .","code":"mpi_result <- df_household |>   compute_mpi(deprivation_profile)  names(mpi_result) #> [1] \"index\"              \"contribution\"       \"headcount_ratio\"    #> [4] \"deprivation_matrix\""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"the-mpi","dir":"Articles","previous_headings":"5. Computing the MPI > Outputs","what":"1. The MPI","title":"Introduction to mpindex","text":"","code":"mpi_result$index"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"contribution-by-dimension","dir":"Articles","previous_headings":"5. Computing the MPI > Outputs","what":"2. Contribution by dimension","title":"Introduction to mpindex","text":"","code":"mpi_result$contribution"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"headcount-ratio","dir":"Articles","previous_headings":"5. Computing the MPI > Outputs","what":"3. Headcount ratio","title":"Introduction to mpindex","text":"","code":"mpi_result$headcount_ratio$uncensored mpi_result$headcount_ratio$censored"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"deprivation-matrix-first-6-observations","dir":"Articles","previous_headings":"5. Computing the MPI > Outputs","what":"4. Deprivation matrix (first 6 observations)","title":"Introduction to mpindex","text":"","code":"mpi_result$deprivation_matrix$uncensored |> head() mpi_result$deprivation_matrix$censored |> head()"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"saving-output","dir":"Articles","previous_headings":"","what":"6. Saving output","title":"Introduction to mpindex","text":"may also save output Excel file.","code":"save_mpi(mpi_result, .filename = 'MPI Sample Output')"},{"path":"https://yng-me.github.io/mpindex/articles/mpindex.html","id":"full-script","dir":"Articles","previous_headings":"","what":"Full script","title":"Introduction to mpindex","text":"","code":"# ---------------------------------- # Load MPI specs from the built-in specs file specs_file <- system.file(\"extdata\", \"global-mpi-specs.csv\", package = \"mpindex\") mpi_specs <- define_mpi_specs(specs_file, .uid = 'uuid') options(mpi_specs = mpi_specs)  # ---------------------------------- # Create an empty list to store deprivation profile for each indicator deprivation_profile <- list()  deprivation_profile$nutrition <- df_household_roster |>   define_deprivation(    .indicator = nutrition,    .cutoff = undernourished == 1 & age < 70,    .collapse = TRUE   )  deprivation_profile$child_mortality <- df_household |>   define_deprivation(    .indicator = child_mortality,    .cutoff = with_child_died == 1   )  deprivation_profile$year_schooling <- df_household_roster |>   define_deprivation(    .indicator = year_schooling,    .cutoff = completed_6yrs_schooling == 2,    .collapse = TRUE   )  deprivation_profile$school_attendance <- df_household_roster |>   define_deprivation(    .indicator = school_attendance,    .cutoff = attending_school == 2 & age %in% c(5:24),    .collapse = TRUE   )  deprivation_profile$cooking_fuel <- df_household |>   define_deprivation(    .indicator = cooking_fuel,    .cutoff = cooking_fuel %in% c(4:6, 9)   )  deprivation_profile$sanitation <- df_household |>   define_deprivation(    .indicator = sanitation,    .cutoff = toilet > 1   )  deprivation_profile$drinking_water <- df_household |>   define_deprivation(    .indicator = drinking_water,    .cutoff = drinking_water == 2   )  deprivation_profile$electricity <- df_household |>   define_deprivation(    .indicator = electricity,    .cutoff = electricity == 2   )  deprivation_profile$housing <- df_household |>   define_deprivation(    .indicator = housing,    .cutoff = roof %in% c(5, 7, 9) |       walls %in% c(5, 8, 9, 99) == 2 |       floor %in% c(5, 6, 9)   )  deprivation_profile$assets <- df_household |>   dplyr::mutate_at(     dplyr::vars(dplyr::starts_with('asset_')),      ~ dplyr::if_else(. > 0, 1L, 0L)   ) |>   dplyr::mutate(    asset_phone = dplyr::if_else(      (asset_telephone + asset_mobile_phone) > 0,      1L,      0L    )   ) |>   dplyr::mutate(    with_hh_conveniences = (      asset_tv + asset_phone + asset_computer +        asset_animal_cart + asset_bicycle +        asset_motorcycle + asset_refrigerator) > 1,    with_mobility_assets = (asset_car + asset_truck) > 0   ) |>   define_deprivation(    .indicator = assets,    .cutoff = !(with_hh_conveniences & with_mobility_assets)   )  # ---------------------------------- # Compute the MPI mpi_result <- df_household |>   compute_mpi(deprivation_profile)  # ---------------------------------- # You may also save your output into an Excel file save_mpi(mpi_result, .filename = 'MPI Sample Output')"},{"path":"https://yng-me.github.io/mpindex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bhas Abdulsamad. Author, maintainer, copyright holder.","code":""},{"path":"https://yng-me.github.io/mpindex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abdulsamad B (2023). mpindex: Multidimensional Poverty Index (MPI). https://github.com/yng-/mpindex, https://mpindex.r-lib.org, https://yng-.github.io/mpindex/.","code":"@Manual{,   title = {mpindex: Multidimensional Poverty Index (MPI)},   author = {Bhas Abdulsamad},   year = {2023},   note = {https://github.com/yng-me/mpindex, https://mpindex.r-lib.org, https://yng-me.github.io/mpindex/}, }"},{"path":"https://yng-me.github.io/mpindex/index.html","id":"mpindex","dir":"","previous_headings":"","what":"Multidimensional Poverty Index (MPI)","title":"Multidimensional Poverty Index (MPI)","text":"mpindex offers set easy--use functions computing Multidimensional Poverty Index (MPI) using Alkire-Foster (AF) counting method developed Sabina Alkire James Foster. Learn vignette(\"mpindex\") ?compute_mpi.","code":""},{"path":"https://yng-me.github.io/mpindex/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multidimensional Poverty Index (MPI)","text":"install mpindex package CRAN: want get latest development version mpindex, install GitHub. Note may need install devtools.","code":"install.packages('mpindex') devtools::install_github('yng-me/mpindex')"},{"path":"https://yng-me.github.io/mpindex/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Multidimensional Poverty Index (MPI)","text":"Load package successfully completed installation.","code":"library(mpindex)"},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":"function uses Alkire-Foster (AF) counting method developed Sabina Alkire James Foster. requires deprivation profile created using (define_deprivation) fuction containing indicators defined specification files.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":"","code":"compute_mpi(   .data,   .deprivation_profile,   ...,   .mpi_specs = getOption(\"mpi_specs\"),   .include_deprivation_matrix = TRUE,   .generate_output = FALSE,   .formatted_output = TRUE,   .output_filename = NULL,   .include_table_summary = TRUE,   .include_specs = FALSE )"},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":".data tidy data frame observation unit analysis defined define_mpi_specs. .deprivation_profile list deprivation profile created using define_deprivation. ... Grouping columns (supports tidyselect), e.g. area (country, urbanity, region, province), sex, ethnic group, etc. .mpi_specs MPI specifications defined define_mpi_specs. .include_deprivation_matrix Whether include deprivation matrix output. .generate_output Whether generate output (Excel file) side effect. .formatted_output YET IMPLEMENTED. Whether formatting applied output. .output_filename Output filename. .include_table_summary YET IMPLEMENTED. Whether include summary information generated output. .include_specs YET IMPLEMENTED. Whether include MPI specification generated output.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":"Returns list objects: index (MPI), contribution (contribution dimension), headcount_ratio (censored uncensored), deprivation_matrix (censored uncensored). poverty_cutoffs defined define_mpi_specs contain one (1) value, index contribution object output cutoff separate table.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":"Alkire-Foster Method Apply Alkire-Foster Method","code":""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/reference/compute_mpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Multidimensional Poverty Index (MPI) — compute_mpi","text":"","code":"# ---------------------------------- # Load MPI specs from the built-in specs file specs_file <- system.file(\"extdata\", \"global-mpi-specs.csv\", package = \"mpindex\") mpi_specs <- define_mpi_specs(specs_file, .uid = 'uuid') options(mpi_specs = mpi_specs)  # ---------------------------------- # Create an empty list to store deprivation profile for each indicator deprivation_profile <- list()  deprivation_profile$nutrition <- df_household_roster |>  define_deprivation(    .indicator = nutrition,    .cutoff = undernourished == 1 & age < 70,    .collapse = TRUE  ) deprivation_profile$child_mortality <- df_household |>  define_deprivation(    .indicator = child_mortality,    .cutoff = with_child_died == 1  ) deprivation_profile$year_schooling <- df_household_roster |>  define_deprivation(    .indicator = year_schooling,    .cutoff = completed_6yrs_schooling == 2,    .collapse = TRUE  ) deprivation_profile$school_attendance <- df_household_roster |>  define_deprivation(    .indicator = school_attendance,    .cutoff = attending_school == 2 & age %in% c(5:24),    .collapse = TRUE  ) deprivation_profile$cooking_fuel <- df_household |>  define_deprivation(    .indicator = cooking_fuel,    .cutoff = cooking_fuel %in% c(4:6, 9)  ) deprivation_profile$sanitation <- df_household |>  define_deprivation(    .indicator = sanitation,    .cutoff = toilet > 1  ) deprivation_profile$drinking_water <- df_household |>  define_deprivation(    .indicator = drinking_water,    .cutoff = drinking_water == 2  ) deprivation_profile$electricity <- df_household |>  define_deprivation(    .indicator = electricity,    .cutoff = electricity == 2  ) deprivation_profile$housing <- df_household |>  define_deprivation(    .indicator = housing,    .cutoff = roof %in% c(5, 7, 9) | walls %in% c(5, 8, 9, 99) == 2 | floor %in% c(5, 6, 9)  ) deprivation_profile$assets <- df_household |>  dplyr::mutate_at(dplyr::vars(dplyr::starts_with('asset_')), ~ dplyr::if_else(. > 0, 1L, 0L)) |>  dplyr::mutate(    asset_phone = dplyr::if_else(      (asset_telephone + asset_mobile_phone) > 0,      1L,      0L    )  ) |>  dplyr::mutate(    with_hh_conveniences = (      asset_tv + asset_phone + asset_computer +        asset_animal_cart + asset_bicycle +        asset_motorcycle + asset_refrigerator) > 1,    with_mobility_assets = (asset_car + asset_truck) > 0  ) |>  define_deprivation(    .indicator = assets,    .cutoff = !(with_hh_conveniences & with_mobility_assets)  )  # ---------------------------------- # Compute the MPI mpi_result <- df_household |>   compute_mpi(deprivation_profile)  # ---------------------------------- # You may also save your output into an Excel file if (FALSE) { save_mpi(mpi_result, .filename = 'MPI Sample Output') }"},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Define deprivation cutoffs — define_deprivation","title":"Define deprivation cutoffs — define_deprivation","text":"deprivation cutoff must set indicator defined MPI specifications. step establishes first cutoff methodology every person/household (defined unit analysis) can identified deprived non-deprived respect indicator. indicator, 0 used indicate \"deprived\", 1 deprived, NA missing non-response. Additional column containing product value indicator obtained corresponding weight also computed convenience.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define deprivation cutoffs — define_deprivation","text":"","code":"define_deprivation(   .data,   .indicator,   .cutoff,   .mpi_specs = getOption(\"mpi_specs\"),   .collapse = FALSE,   .collapse_condition = NULL )"},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define deprivation cutoffs — define_deprivation","text":".data data frame tibble .indicator Name indicator defined MPI specs (must exactly match specs). .cutoff conditional logic defines poverty line determine whether deprived . .mpi_specs MPI specifications defined define_mpi_specs. .collapse boolean indicating whether collapse data frame . useful, instance, original data .cutoff argument applies individual person unit analysis household. .collapse_condition YET FULLY IMPLEMENTED. WORKS DEFAULT. condition .collapse set TRUE. NULL, max() used default.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define deprivation cutoffs — define_deprivation","text":"data frame deprivation value indicator (.*_unweighted): 0 \"deprived\", 1 deprived, NA missing non-response; product .*_unweighted corresponding weight (.*_weighted).","code":""},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define deprivation cutoffs — define_deprivation","text":"Apply Alkire-Foster Method","code":""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/reference/define_deprivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define deprivation cutoffs — define_deprivation","text":"","code":"# Use sample specs file included in the package specs_file <- system.file(  \"extdata\",  \"global-mpi-specs.csv\",  package = \"mpindex\" ) specs <- define_mpi_specs(specs_file, .uid = 'uuid') options(mpi_specs = specs)  # Using built-in dataset df_household |>   define_deprivation(     .indicator = drinking_water,     .cutoff = drinking_water == 2   ) #> # A tibble: 198 × 3 #>    uuid                            d03_i03_drinking_wat…¹ d03_i03_drinking_wat…² #>    <chr>                                            <int>                  <dbl> #>  1 5dbec60a-ebda-47bd-ae18-3b017a…                      0                      0 #>  2 8b70c208-8642-408c-8a51-30bcaa…                      0                      0 #>  3 aa7cb64d-ba16-4842-8994-877206…                      0                      0 #>  4 df3e5c9b-7218-451d-9917-cd552c…                      0                      0 #>  5 57babe6a-c163-4d8e-aa80-3a9bc9…                      0                      0 #>  6 ba3f75cd-102d-482d-a979-b9098e…                      0                      0 #>  7 291c03d9-7947-459a-9c02-e68b38…                      0                      0 #>  8 b8d1b52e-2b5d-4942-9939-7c0613…                      0                      0 #>  9 2e80bf1a-03e9-4894-8792-0ce936…                      0                      0 #> 10 208992f0-9c6d-4c5c-a72a-4ffab6…                      0                      0 #> # ℹ 188 more rows #> # ℹ abbreviated names: ¹​d03_i03_drinking_water_unweighted, #> #   ²​d03_i03_drinking_water_weighted  df_household_roster |>   define_deprivation(     .indicator = school_attendance,     .cutoff = attending_school == 2,     .collapse = TRUE   ) #> Warning: There were 38 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `School attendance = max(`School attendance`, na.rm = T)`. #> ℹ In group 1: `uuid = \"018a93c5-d65f-446f-9ee1-88a789cfea68\"`. #> Caused by warning in `max()`: #> ! no non-missing arguments to max; returning -Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 37 remaining warnings. #> # A tibble: 198 × 3 #>    uuid                            d02_i02_school_atten…¹ d02_i02_school_atten…² #>    <chr>                                            <dbl>                  <dbl> #>  1 018a93c5-d65f-446f-9ee1-88a789…                   -Inf               -Inf     #>  2 01c2d953-0bd3-4827-a7f0-fee99b…                      0                  0     #>  3 06e87d18-be21-4c62-aa35-547116…                      1                  0.167 #>  4 07d03bdd-6abc-4ef7-8c2a-b76a24…                      0                  0     #>  5 087868f3-ef7a-4ed6-a803-75ecc9…                      1                  0.167 #>  6 0a59ad2a-20c7-4b17-a6ae-0f0250…                      0                  0     #>  7 0aa10fbf-3347-442f-86c9-83d7a2…                      0                  0     #>  8 0ba3b628-4082-4bc6-ae19-df01ac…                      0                  0     #>  9 0c967915-2e93-4e6e-9ddc-f3f9be…                      0                  0     #> 10 0cbd0210-3639-4fef-bdb1-e7e090…                      0                  0     #> # ℹ 188 more rows #> # ℹ abbreviated names: ¹​d02_i02_school_attendance_unweighted, #> #   ²​d02_i02_school_attendance_weighted"},{"path":"https://yng-me.github.io/mpindex/reference/define_mpi_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","title":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","text":"Use define MPI dimensions, indicators corresponding weights using accessible file types: .xlsx (Excel), .json, .csv, .txt (TSV). can also set poverty cutoff list poverty cutoffs (achieve gradient list MPIs) used computation MPI.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/define_mpi_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","text":"","code":"define_mpi_specs(   .mpi_specs_file,   .poverty_cutoffs = 1/3,   .unit_of_analysis = \"households\",   .aggregation = NULL,   .uid = NULL,   .source_of_data = NULL,   .names_separator = \">\" )"},{"path":"https://yng-me.github.io/mpindex/reference/define_mpi_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","text":".mpi_specs_file Accepts .xlsx (Excel), .json, .csv, .txt (TSV) file format. file contain following columns/variables: Dimension, Indicator, Variable, Weight, Description (optional). See example . .poverty_cutoffs Accepts single value vector poverty cutoffs. parameter (usually denoted k) reflects minimum level deprivations deprivation score individual household must suffering simultaneously considered poor. See example . .unit_of_analysis e.g. individuals, families, households, communities. Default value households. .aggregation Column name dataset defines aggregation level. .uid Column name containing unique ID observation defines lowest level disaggregation (usually unit analysis). .source_of_data Source data used computation. used footnote table generating output. .names_separator Column separator defines hierarchy column header.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/define_mpi_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","text":"list objects containing MPI specifications needed compute_mpi function.","code":""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/reference/define_mpi_specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define MPI specifications: dimensions, indicators, and weights — define_mpi_specs","text":"","code":"# Use sample specs file included in the package specs_file <- system.file(  \"extdata\",  \"global-mpi-specs.csv\",  package = \"mpindex\" ) # To see other sample specs file (with different supported file format) system.file(\"extdata\", package = \"mpindex\") |>   list.files() #> [1] \"global-mpi-specs.csv\"  \"global-mpi-specs.json\" \"global-mpi-specs.txt\"  #> [4] \"global-mpi-specs.xlsx\"  # OPTIONS: # 1. Pass this `specs` object to `compute_mpi` function # specs <- define_mpi_specs(specs_file)  # 2. Make it available globally (recommended approach) options(mpi_specs = specs)"},{"path":"https://yng-me.github.io/mpindex/reference/df_household.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset of households — df_household","title":"Sample dataset of households — df_household","text":"synthetic dataset containing household information primarily used demonstration purposes use mpindex package.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/df_household.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample dataset of households — df_household","text":"","code":"df_household"},{"path":"https://yng-me.github.io/mpindex/reference/df_household.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample dataset of households — df_household","text":"tibble 198 rows 21 variables: uuid Unique ID class Urbanity: Rural Urban drinking_water Acess drinking water: 1 - improved; 2 - unimproved toilet Service level toilet sanitation facility: 1 - basic; 2 - limited; 3 - unimproved; 4 - open defecation with_child_died least one (1) child died last five (5) years: 1 - child died; 2 - without child died roof Main construction material roof: 1 - galvanized iron/aluminum; 2 - concrete/clay tile; 3 - half galvanized iron half concrete; 4 - wood/bamboo; 5 - cogon/nipa/anahaw; 6 - asbestos; 7 - makeshift/salvaged/improvised materials; 9 - construction material walls Main construction material outer walls: 1 - concrete/brick/stone; 2 - wood; 3 - half concrete/brick/stone half wood; 4 - Galvanized iron/aluminum; 5 - bamboo/sawali/cogon/nipa; 6 - asbestos; 7 - glass; 8 - makeshift/salvaged/improvised materials; 9 - none; 10 - concrete hollow blocks; 11 - concrete hollow blocks/wood;  12 - shear walls; 99 - construction material floor Main construction material floor: 1 - concrete; 2 - wood; 3 - coconut lumber; 4 - bamboo; 5 - earth/sand/mud; 6 - makeshift/salvaged/improvised materials; 9 - construction material electricity Access electricity: 1 - access electricity; 2 - without access electricity cooking_fuel Fuel use cooking: 1 - electricity; 2 - kerosene (gaas); 3 - liquified petroleum gas (LPG); 4 - charcoal; 5 - wood; 6 - none; 9 - cooking fuel dung, agricultural crop, shrubs asset_radio Number working radio owned household asset_tv Number working television owned household asset_telephone Number working telephone owned household asset_mobile_phone Number working mobile phone owned household asset_computer Number working computer owned household asset_animal_cart Number animal carts owned household asset_bicycle Number bicycle owned household asset_motorcycle Number motorcylce owned household asset_refrigerator Number working refrigerator owned household asset_car Number car owned household asset_truck Number trucks owned household","code":""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/reference/df_household.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset of households — df_household","text":"","code":"df_household #> # A tibble: 198 × 21 #>    uuid            class drinking_water toilet with_child_died  roof walls floor #>    <chr>           <chr>          <int>  <int>           <int> <int> <int> <int> #>  1 5dbec60a-ebda-… Rural              1      1               2     1     1     1 #>  2 8b70c208-8642-… Rural              1      1               2     1     1     1 #>  3 aa7cb64d-ba16-… Rural              1      1               2     1     3     1 #>  4 df3e5c9b-7218-… Rural              1      1               2     1     3     1 #>  5 57babe6a-c163-… Rural              1      1               2     1     3     1 #>  6 ba3f75cd-102d-… Rural              1      1               2     1     5     4 #>  7 291c03d9-7947-… Rural              1      1               2     1     5     1 #>  8 b8d1b52e-2b5d-… Rural              1      1               2     1     1     1 #>  9 2e80bf1a-03e9-… Rural              1      1               2     1     3     1 #> 10 208992f0-9c6d-… Rural              1      1               2     1     1     1 #> # ℹ 188 more rows #> # ℹ 13 more variables: electricity <int>, cooking_fuel <int>, #> #   asset_refrigerator <int>, asset_radio <int>, asset_tv <int>, #> #   asset_telephone <int>, asset_mobile_phone <int>, asset_animal_cart <int>, #> #   asset_computer <int>, asset_motorcycle <int>, asset_bicycle <int>, #> #   asset_car <int>, asset_truck <int>"},{"path":"https://yng-me.github.io/mpindex/reference/df_household_roster.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset of household members — df_household_roster","title":"Sample dataset of household members — df_household_roster","text":"dataset contains many--one relationship df_household dataset. Hence, can apply joins using uuid.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/df_household_roster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample dataset of household members — df_household_roster","text":"","code":"df_household_roster"},{"path":"https://yng-me.github.io/mpindex/reference/df_household_roster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample dataset of household members — df_household_roster","text":"tibble 905 rows 8 variables: uuid Unique ID line_number Number identifier member within household class Urbanity: Rural Urban sex Sex household member age Age household member attending_school Whether household member (aged 5-24 years old) currently attending school: 1 - currently attending; 2 - currently attending completed_6yrs_schooling Whether completed least six (6) years schooling: 1 - completed; 2 -completed undernourished Whether household member (aged 70 years old) undernourished: 1 - undernourished; 2 - undernourished","code":""},{"path":[]},{"path":"https://yng-me.github.io/mpindex/reference/df_household_roster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset of household members — df_household_roster","text":"","code":"df_household_roster #> # A tibble: 905 × 8 #>    uuid            line_number class sex     age attending_school undernourished #>    <chr>                 <int> <chr> <chr> <int>            <int>          <int> #>  1 5dbec60a-ebda-…           1 Rural Male     55               NA              2 #>  2 5dbec60a-ebda-…           2 Rural Fema…    48               NA              2 #>  3 5dbec60a-ebda-…           3 Rural Fema…    17                1              2 #>  4 5dbec60a-ebda-…           4 Rural Male     10                1              2 #>  5 8b70c208-8642-…           1 Rural Fema…    30               NA              2 #>  6 8b70c208-8642-…           2 Rural Male     26               NA              2 #>  7 8b70c208-8642-…           3 Rural Male      3               NA              2 #>  8 8b70c208-8642-…           4 Rural Male     19                1              2 #>  9 aa7cb64d-ba16-…           1 Rural Male     66               NA              2 #> 10 aa7cb64d-ba16-…           2 Rural Fema…    62               NA              2 #> # ℹ 895 more rows #> # ℹ 1 more variable: completed_6yrs_schooling <int>"},{"path":"https://yng-me.github.io/mpindex/reference/save_mpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Save MPI Output — save_mpi","title":"Save MPI Output — save_mpi","text":"Save MPI ouput Excel file format.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/save_mpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save MPI Output — save_mpi","text":"","code":"save_mpi(   .mpi_output,   .mpi_specs = getOption(\"mpi_specs\"),   .filename = NULL,   .formatted_output = TRUE,   .include_table_summary = TRUE,   .include_specs = FALSE )"},{"path":"https://yng-me.github.io/mpindex/reference/save_mpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save MPI Output — save_mpi","text":".mpi_output object derived compute_mpi. .mpi_specs MPI specifications defined define_mpi_specs. .filename Output filename .formatted_output Whether formatting applied output. .include_table_summary YET IMPLEMENTED. Whether include summary information generated output. .include_specs YET IMPLEMENTED. Whether include MPI specification generated output.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/save_mpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save MPI Output — save_mpi","text":"Returns file location output generated.","code":""},{"path":"https://yng-me.github.io/mpindex/reference/save_mpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save MPI Output — save_mpi","text":"","code":"if (FALSE) { # It requires an MPI output (list type) in the first argument save_mpi(mpi_result, .filename = 'MPI Sample Output') }"}]
